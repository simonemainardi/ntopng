/*
 *
 * (C) 2013-17 - ntop.org
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */

#ifndef _ALERTS_MANAGER_H_
#define _ALERTS_MANAGER_H_

#include "ntop_includes.h"

class Flow;
class SPSCQueue;

class AlertsManager : protected StoreManager, protected GenericHash {
 private:
  SPSCQueue *alertsQueue;
  pthread_t dequeueThreadLoop;
  Mutex producersMutex;

  char queue_name[CONST_MAX_LEN_REDIS_KEY];
  bool store_opened, store_initialized;
  bool hash_initialized;
  u_int32_t num_alerts_engaged;
  bool make_room;
  int openStore();
  
  /* methods used for alerts that have a timespan */
  bool isAlertEngaged(AlertEntity alert_entity, const char *alert_entity_value, const char *engaged_alert_id);
  void markForMakeRoom(AlertEntity alert_entity, const char *alert_entity_value, const char *table_name);
  int deleteOldestAlert(AlertEntity alert_entity, const char *alert_entity_value, const char *table_name, u_int32_t max_num_rows);

  SlackNotificationChoice getSlackNotificationChoice(char* choice);
  
  /*void notifySlack (AlertEntity alert_entity, const char *alert_entity_value,
		    const char *engaged_alert_id,
		    AlertLevel alert_severity,
		    const char *alert_json,
		    const char *alert_origin, const char *alert_target);
  void notifyAlert(AlertEntity alert_entity, const char *alert_entity_value,
		   const char *engaged_alert_id,
		   AlertType alert_type, AlertLevel alert_severity, const char *alert_json,
		   const char *alert_origin, const char *alert_target);*/
  int getNumAlerts(const char *sql_where_clause);

  /* private methods to check the goodness of submitted inputs and possible return the input database string */
  bool isValidHost(Host *h, char *host_string, size_t host_string_len);
  bool isValidFlow(Flow *f);
  bool isValidNetwork(const char *cidr);
  bool isValidInterface(NetworkInterface *n);

  Alert *getEngaged(Alert *a);
  bool isEngaged(Alert *a);
  bool setEngaged(Alert *a);
  bool setReleased(Alert *a);
  bool setStored(Alert *a);
  int initEngaged();

 public:
  AlertsManager(NetworkInterface *network_interface, const char *db_filename);
  virtual ~AlertsManager();

  virtual void *dequeueLoop();
  void startDequeueLoop();
  bool initEngaged(Alert *a);

  int enqueue(const char *json_alert);

  int processDequeuedAlert(const char *json_alert);
  int processInactive();
  int engageAlert(Alert *a);
  int releaseAlert(Alert *a);
  int storeAlert(Alert *a);

  inline u_int32_t getNumEngagedAlerts() { return getCurrentSize(); };
  u_int32_t getNumEngagedAlerts(Host *h);

  void incDecEngagedAlertsCounters(Alert *a, bool increase);
  void updateStatusInformation(Alert *a, bool status_alerted);

  inline bool makeRoomRequested() { return(make_room); };
  void makeRoom(AlertEntity alert_entity, const char *alert_entity_value, const char *table_name);

  /*
    ========== delete API ======
   */
  //~ int deleteAlerts(bool engaged, AlertEntity alert_entity, const char *alert_entity_value, AlertType alert_type, time_t older_than);

  /* Method used to retrieve alerts and counters with possible sql clause to filter */
  int queryAlertsRaw(lua_State *vm, const char *selection, const char *clauses);

  /* Following are the legacy methods that were formally global to the whole ntopng */
#ifdef NOTUSED
  /**
   * @brief Queue an alert in redis
   *
   * @param level The alert level
   * @param s     The alert status (alert on/off)
   * @param t     The alert type
   * @param msg   The alert message
   */
  int queueAlert(AlertLevel level, AlertStatus s, AlertType t, char *msg);
  /**
   * @brief Returns up to the specified number of alerts, and removes them from redis. The first parameter must be long enough to hold the returned results
   * @param allowed_hosts The list of hosts allowed to be returned by this function
   * @param alerts The returned alerts
   * @param start_idx The initial queue index from which extract messages. Zero (0) is the first (i.e. most recent) queue element.
   * @param num The maximum number of alerts to return.
   * @return The number of elements read.
   *
   */
  int getQueuedAlerts(lua_State* vm, AddressTree *allowed_hosts, int start_offset, int end_offset);
  /**
   * @brief Returns the number of queued alerts in redis generated by ntopng
   *
   */
  int getNumQueuedAlerts();
  /**
   * @brief Delete the alert identified by the specified index.
   * @param idx The queued alert index to delete. Zero (0) is the first (i.e. most recent) queue element.
   * @return The number of elements read.
   *
   */
  int deleteQueuedAlert(u_int32_t idx_to_delete);
  /**
   * @brief Flush all queued alerts
   *
   */
  int flushAllQueuedAlerts();
#endif
};

#endif /* _ALERTS_MANAGER_H_ */
